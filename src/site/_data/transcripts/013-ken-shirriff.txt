[music]
00:00:14 Bryan Cantrill: Welcome to On The Metal, Tales from the Hardware/Software Interface. I'm Bryan Cantrill. With me as always is Jessie Frazelle. Hey, Jess.
00:00:21 Jessie Frazelle: Hey, Bryan.
00:00:22 Bryan: We're joined by our boss, Steve Tuck. Hey, Steve. All right, Jess, you want to introduce who we've got in the garage with us today?
00:00:27 Jessie: Yes. Today we have Ken Shirriff. I found out about him through Twitter, but it turns out that Bryan and him already knew each other. His Twitter feed is fascinating when it comes to restoring old computers and stuff like that. I feel like I've learned a lot from it, so super excited.
00:00:41 Ken Shirriff: Well, it's great to be here.
00:00:42 Bryan: Yes. Ken, it's great to have you in the garage. It's been a long time.
00:00:46 Ken: This is a literal garage.
00:00:48 Bryan: It is a literal garage, yes. You are in a literal garage, one in pretty good shape actually.
00:00:53 Ken: Yes, a very nice garage.
00:00:55 Bryan: Ken, you and I worked together in what is now Facebook but was domiciled--
00:01:00 Ken: Yes, Building 17.
00:01:02 Bryan: You are wearing your Sun Cluster jacket which I-
00:01:06 Ken: I'll hold it up to the mic.
00:01:07 Bryan: Yes, hold it up to the mic. A lovely jacket that I understand your daughter has instructed you not to wear in public, but I'm glad that you're going around the ban.
00:01:15 Ken: Yes. She's forbidden me from wearing corporate logos outside, but I'm making a special case for this.
00:01:21 Bryan: Oh, it's all corporate logos? It wasn't just a specific ban on a specific technology or company. It's all corporate logos. Well, good for her. Probably good taste, but I'm glad you wore the jacket. Back in the day, you and I were working in the late '90s at Sun and it was only years later that I read your blog and all the interest in retrocomputing. Were you always interested in retrocomputing even then?
00:01:42 Ken: No, not really. Back then, I was just focused on working at Sun, getting Sun Cluster working, fixing bugs, but now I've got more time to do the retrocomputing stuff and I'm finding it very interesting doing my job to preserve history, but I see you've got a whole bin of old retrocomputing manuals and quite the collection.
00:02:01 Bryan: I've got a bin of manuals and I've always been interested in these weird artifacts of history and computing, but when I look at your blog, I've not really gone into any of this old actual physical hardware, and some of the things you found are just amazing. I mean, there was just the Soyuz- just reading recently, probably your most recent blog post on the Soyuz clock, right? Describe that a little bit because that was stunning.
00:02:29 Ken: It's basically a digital clock that was mounted on the control panel of the Soyuz spacecraft in the '80s. It has a clock, it has an alarm, it has a stopwatch. A friend of mine bought one at an auction. We opened it up. I figured there'd be a clock chip inside, but instead--
00:02:45 Bryan: But you were thinking like, "How complicated could it be," right?
00:02:47 Ken: Yes. Instead, we open it up, it's got like 10 circuit boards. It's got over a hundred chips inside. It's like, "What on earth are they doing here? Is there some super-complicated technology is interfacing with the rest of the spacecraft?" After a bunch of analysis, it turns out it's really just the equivalent of a 1970s wristwatch, a digital watch. They used TTL chips. Doing it in the '80s seems kind of late for TTL, but given the state of Russian technology was a little behind the US, that's what they used. It just takes over a hundred chips to build a clock out of TTL chips.
00:03:23 Bryan: That is amazing. It must have been stunning for you to open this thing up, which is maybe like two inches by three inches is what it looked like. How big was this thing?
00:03:32 Ken: Yes, it's pretty small, but inside they have these very small TTL surface mount chips, everything was surface mount flat packs. They're all labeled in Cyrillic. I had no idea what these chips were even doing.
00:03:45 Bryan: Okay, you're not a native Russian speaker?
00:03:48 Ken: No.
00:03:49 Bryan: Because honestly, you would not know- from reading that blog entry, where you are very confidently decoding all of the Cyrillic on these packages.
00:03:56 Ken: Oh, we're getting lots of feedback from Russian readers about things that I've done wrong. They don't like any criticism of Russian technology.
00:04:05 Bryan: I don't think- that blog entry, to me, was not- I think it was amazing what they were able to- the efficiency of packing it in there, given that they were behind the-- It was not CMOS based.
00:04:17 Ken: You have the circuit boards, just two sides of the circuit boards, the wiring harnesses, it's all point to point wiring. It's all bundled up very nicely, laced into these wiring harnesses connecting everything together. It's a real pain to trace out the circuitry because everything goes into a mystery wiring harness and pops out somewhere else.
00:04:34 Bryan: Oh, wow.
00:04:35 Ken: I spent a whole lot of time with the multimedia beeping things out. I finally found a Russian data book that tells you what the chips are and I've been cutting and pasting it into Google translate trying to understand it all. The chips are all similar to 7400-series TTL chips, but some of them are quite different. They took things in a different direction.
00:04:55 Bryan: I find this naturally- Jess, I can't speak for- I mean, you find this naturally captivating, it's just amazing.
00:05:00 Jessie: Yes.
00:05:00 Bryan: What kind of got you initially interested in taking apart some of these old things and understanding them? Because obviously, sometime between the nineties and present day, you got very interested in this stuff.
00:05:12 Ken: A lot of it goes back to when I was a child and I saw a punched card computer. I got a tour of it, and then later I was actually running some programs on punched cards. I've got a soft spot in my heart for punched card computers, which has led me to a lot of stuff at the computer history museum.
00:05:27 Bryan: Hold on, you were running software for a punched card computer, you're not that much older than I am. How did that work?
00:05:33 Ken: This was when I was in about seventh grade, I was reading programs in Fortran. I had managed to talk to the local university and letting me use their computer. I had a great time doing that.
00:05:47 Bryan: What kind of computer was it?
00:05:48 Ken: It was an Amdahl, I believe it was an IBM 370 clone.
00:05:52 Jessie: Oh, cool.
00:05:53 Bryan: Wow. That's what- Tom Lyon was one of our guests on On The Metal, ported units to that machine. That's a big machine to be playing with.
00:06:00 Ken: It was the Computer Center at the University of Manitoba. I'd punch a deck of cards on the keypunch, then I'd stand in line, hand them to the operator. The operator would run them through, the printer would spew out output at high speed. You'd rip off your output, then there's a huge recycling bin in the middle, and you'd throw all the bad stuff into this recycling bin in the middle, and pick up your program on the other side, and walk out with your listing. Figure out what went wrong, walk over to the keypunches, fix the bugs.
00:06:30 Bryan: This is your first experience in programming? This is your first computer effectively, right?
00:06:34 Ken: Yes, basically.
00:06:35 Jessie: What type of program does a seven-year-old write on one of those?
00:06:41 Ken: This was 7th grade.
00:06:42 Jessie: Oh, 7th grade. Okay.
00:06:44 Bryan: A little more early.
00:06:44 Jessie: Still, I don't know what I'd do.
00:06:47 Ken: My biggest accomplishment was writing a calendar program, print out a calendar based on the month and year.
00:06:54 Bryan: That's pretty impressive. Was it Gregorian, and had all the necessary modifications for the Gregorian calendar?
00:07:01 Ken: Yes, I found the formula for working out the dates in a book. It's not too hard to write it in Fortran. Getting the format, Fortran's not really good for formatting output nicely, but I got it to work.
00:07:15 Bryan: That's great. What drove you for that in particular?
00:07:19 Ken: I just thought computers were really cool, and I wanted to play around with them, but my father told me, "You're never going to get a job just doing computers," but it worked out for me.
00:07:31 Bryan: It's funny because I wonder- certainly that's not something you hear now, I heard the same thing when I was a kid. You can't just play on the computer for the rest of your life. Well, maybe I can. Maybe I can.
00:07:43 Ken: He told me, "You have to use computers as part of something else, like being in a business where you're using computers, or being a scientist where you use computers, but you can't just do computers for a career."
00:07:54 Bryan: Jess, this gets to one of your favorite lines from Halt and Catch Fire.
00:07:57 Jessie: Yes, it's, "Computers aren't the thing. They're the thing that gets you to the thing."
00:08:00 Bryan: Which I love.
00:08:01 Jessie: How did you know that I would just be able to say that?
00:08:03 Bryan: I've been hanging out with you enough to know what your favorite lines are from Halt and Catch Fire. You said that a couple of times, and I think it's a great line. In terms of making the point that your father's making, although what your father is not realizing, actually, it turns out, you can make the thing.
00:08:20 Jessie: Yes, that's how [unintelligible 00:08:20].
00:08:20 Bryan: Did you know at that age that you wanted to mess around with computers?
00:08:25 Ken: Yes, basically from that age on, I figured computers were what I wanted to do for a career. Some people, it takes a long time for them to figure out, but I knew at a young age that computers were where it was for me.
00:08:38 Bryan: Yes, it's a real luxury to have that drive. Some gap between that and Sun, when I know you. What kind of machines had you encountered along the way, before hitting Sun?
00:08:48 Ken: Well, I built a Z80 computer, S100 circuit boards plugged into a box when I was younger. It never, ever worked. I'm hoping-- Now, I probably have the skills to get it working, so that's on my list of things to do.
00:09:02 Bryan: Oh my God, do you know where the physical machine is? I mean, do you have it still, no?
00:09:06 Ken: Yes, I have it.
00:09:07 Bryan: Oh my God.
00:09:08 Ken: I have a 16K memory board that I soldered by hand, dozens of chips under this board.
00:09:14 Bryan: Wow, this is like a Rosebud Orson Welles kind of thing that you're trying to get back to that childhood computer and get that actually working.
00:09:23 Ken: Then finally, my life will be complete or something.
00:09:26 Bryan: Yes, right, exactly. That's pretty deep actually. I'm amazed you still have this thing.
00:09:30 Ken: Well, my dad kept it in the garage for years, and finally, he said, "I'm cleaning out. Here, you take it."
00:09:36 Bryan: There you go. Have you tried to get it working, or that's on the list?
00:09:40 Ken: It's on the list. I've got way too many things on the list.
00:09:42 Bryan: That's right. Well, you got to get to that thing last.
00:09:45 Ken: Yes, like on my deathbed, it finally boots up and I keel over.
[laughter]
00:09:51 Bryan: I think [unintelligible 00:09:51] said he always lionized Leonhard Euler because he said Leonhard Euler died doing math. You heard the story, Jess? Because you know Euler is-
00:10:01 Jessie: Yes.
00:10:02 Bryan: -just ridiculously prolific and Euler has got his great-great-grandson, I believe, on his lap, calculates the orbit of Uranus, the recently discovered planet, he finished- he's blind at this point. He calculates the orbit, he realizes he's having a stroke, and he says, "I die," and he dies.
00:10:22 Jessie: What, what, what?
00:10:24 Bryan: Yes, this is how Euler goes. Erdos would retell this story because he's like, "That's the way to go out." Euler went out the way a mathematician should go out, doing math, basically doing math up until the last conceivable second. He just loved this fact that Euler would say, "I die," and there was some smart-ass grad student who pointed out that another one of Euler's conjectures is proved to be true, a math joke.
00:10:48 Jessie: Oh, that's good.
00:10:49 Bryan: Yes, one of those-
00:10:51 Jessie: It's a little dark.
00:10:51 Bryan: Yes, exactly, a little dark. Anyway, you have this machine that you built yourself, you never get it working, but still, you must have enjoyed the journey as they say.
00:10:59 Ken: I learned a lot doing it, and shortly after my dad bought a Commodore PET, which worked out of the box, so then I could actually write programs and stop soldering so much.
00:11:09 Bryan: The Commodore PET has that- the C64 has come up on On The Metal, but not the Commodore PET, and the Commodore PET is actually the first computer that I actually physically touched I think. I'm glad you brought up the Commodore PET. You had your own PET?
00:11:22 Ken: Yes, I wrote a bunch of programs in that. I disassembled the ROM and spent a whole lot of time reverse-engineering what the ROM did, how the basic interpreter worked. I figured out a lot of it, but there was still a lot that was beyond my comprehension.
00:11:36 Bryan: How old were you when you had the PET? In a desperate attempt to make myself feel better for not having disassembled the ROM or not having done really anything other than played basic games.
00:11:46 Ken: I must have been probably 13 at the time.
00:11:48 Bryan: All right, I was definitely prepubescent, it makes me feel a little better, but that's great, you had the PET reverse-engineered effectively?
00:11:54 Ken: Yes, and had a copy of the schematics. I spent a lot of time trying to understand what the schematics did because that state machine I never quite figured out, but a lot of it I understood.
00:12:04 Jessie: That's cool.
00:12:05 Bryan: What is the Commodore PET's role in history, if anything? It plays an outsized role for me because I had in the school, but was it actually a relevant machine? I don't really know that much about it.
00:12:15 Ken: It was one of the very popular home computers. It basically had the Apple II, the Commodore PET, TRS-80, affectionately known as the "Trash-80".
00:12:25 Bryan: The Trash-80, yes.
00:12:27 Ken: These were the machines that really got the home computer out of the hobbyists soldering sort of market, and into the people that actually just go and buy one.
00:12:37 Bryan: Right. You're 13, you got the schematics for the Commodore PET. You got that thing reverse-engineered, and then what's next? What's the next machine that-- We're in the early '80s at this point, right? It's going to be like '83, '84, something like that.
00:12:48 Ken: Went off to the University of Waterloo for college. They had a bunch of computers there. Spent a lot of time doing stuff on IBM PCs, learning real computer scientist skills, went to grad school, worked on a lot of stuff there, a lot of SPARC SunBoxes there.
00:13:10 Bryan: Right, and then you probably catch up to when you and I crossed paths, right? In the late '90s, it must've been.
00:13:15 Ken: Yes, when I went to Sun Labs, working on a Cluster operating system, turned into Sun Cluster, moved into becoming a product, I moved over to Building 17 where I encountered you.
00:13:25 Bryan: Right. Little did we know is how we'd blown up later by a bunch of Facebookers, but whatever. When does the retro computing interest really-- It's just not then, but later, you get really interested in all these old machines.
00:13:37 Ken: A lot of it was when I saw the Visual 6502 online, where they had reverse-engineered the 6502 chip, the same chip that was in the Commodore PET.
00:13:46 Jessie: Nice.
00:13:47 Ken: They had a Java script simulator. I looked at it and was like, "Wow, this is really cool. All these flashing transistors and things, but I have no idea what's going on here." It's embarrassing being a computer scientist and having no idea what was really happening inside a chip, so I started to look into the 6502 in more detail, understanding what's really going on at the transistor level. It got me into looking at other chips. I bought myself a metallurgical microscope so I could open up my own chips and start looking inside.
00:14:16 Jessie: That's dope.
00:14:16 Bryan: Woah, wow.
00:14:17 Jessie: We need one of those. Why don't we have one of those?
00:14:19 Bryan: Whenever someone's got some amazing piece of hardware, this is always the first thing you say, "Why can't we have one of those?" It's like, can't Ken have his own thing? Does it always have to be something we don't have? But that said, we're like, "We need to get one of those though."
00:14:33 Jessie: We should.
00:14:33 Bryan: That would be cool. What can you do with those? You decap them and--
00:14:36 Ken: My microscope and decapping skills are way below someone like John McMaster. I stick to chips that I can decap with a chisel, like ones in ceramic packages, ones with metalheads, I don't like messing around with boiling sulfuric acid. Basically, I buy a chip on eBay, I tap it with a chisel, pop it open, put it under the microscope, take a bunch of pictures, stitch it together, get a nice image of the chip, and then I sit down and try to figure out what's going on in the chip.
00:15:07 Bryan: Wow. What are some of the chips you've done this to?
00:15:10 Ken: Right now, I'm working on the Am2901, which is a 4-bit bit-slice processor that was very popular in the '70s and '80s with a lot of minicomputers.
00:15:21 Bryan: This is the AMD 2900 series, right?
00:15:24 Ken: Yes.
00:15:24 Bryan: Okay. Could you talk about that a little bit? Because we had Jeff Rothschild on here and he was talking about the AMD 2900. I didn't recognize that when he talked about it. Then only afterward, it's printed the show notes, I thought he was referring to the AMD 29000, which was a RISC processor that came later. The 300 is a bit-slice processor. I don't understand anything about these bit-sized processors. Could you explain them a little bit?
00:15:49 Ken: Well, they're an interesting technology that came into play when you could fit enough onto a chip, make part of a microprocessor, but not the whole microprocessor. In particular, most of your microprocessors like the 6502 use MOS transistors, later CMOS. In the '70s and '80s, that was a slow backward technology, bipolar TTL was the way to go for high speed. Bipolar transistors were too big to put a whole lot on a chip, so what they'd do is make something like the Am2901 chip, which was orbit registers, and ALU. It was designed in such a way that you could combine a bunch of them together to combine and make an 8-bit, 16, 32, 64-bit processor, whatever you want, with enough chips.
00:16:33 Bryan: It's like a Lego kit. Make your own Lego processor.
00:16:34 Jessie: That is cool. Someone should do that today. It's like a RISC-V although, a lot different, but it could be a module.
00:16:43 Ken: The thing about these chips is they only had the ALU and the registers, they didn't have any of the control logic.
00:16:48 Bryan: You're right, exactly. That's what you have with RISC-V, it's like you're missing a lot of CPU.
00:16:54 Ken: You would buy a separate chip that would be a sequencer that would step through microcode, you'd have a microcode ROM, have a bit of glue logic, and then you'd build your processor out of a board of these chips.
00:17:06 Bryan: Could you buy different microcode that had different control flow logic in it?
00:17:11 Ken: Well, basically, you design it for whatever instruction set you want. Back then, it was much easier for people to build their own computers, their own architecture, their own instruction set, whatever you wanted in your computer. You just designed it that way. You weren't locked into x86 or something.
00:17:28 Bryan: Wow. We think about people who complain about technology being hard to use, "Hey, at least you're not making your own microprocessor." That seems like that would require a lot of tooling to get up and running.
00:17:38 Ken: Well, the thing with TTL chips is you can just wire them together on a printed circuit board. It was quite common for people to design their own processors out of chips in that era. Even video games, they'd be like, "Well, we want a processor for the video games. Let's just design our own processor." It's a different world from now where there's a small number of processors. You go and buy what you want.
00:18:01 Bryan: The clock rates are lower, right? Presumably, it was clocked, the 2901?
00:18:04 Ken: Yes. You'd be running at a few megahertz. The 2901 that I'm looking at, it's actually an ECL, emitter-coupled logic version inside, which is a high-speed technology I’ve actually used on the Cray-1. It was supposed to be the wave of the future, but it is very hot. It uses a lot of power, so once low-power CMOS came out, it basically killed it off entirely.
00:18:28 Bryan: How much power are we talking about actually, out of curiosity?
00:18:32 Ken: I don't know the numbers, but-
00:18:33 Bryan: Much more than CMOS?
00:18:34 Ken: Yes.
00:18:35 Bryan: Interesting. Have you gotten this thing working?
00:18:38 Ken: Remember, I'm taking these things apart.
00:18:40 Bryan: Right. Excuse me. Let me go back to where I was popping the cap off with that chisel.
00:18:46 Ken: I start with a working chip, and by the time I'm done, it's entirely not working.
[laughter]
00:18:52 Bryan: That's great though. How much did you know about these microprocessors going in? Do you even call this a microprocessor?
00:18:58 Ken: It's controversial what the definition of a microprocessor is. I've actually read an article on that and have angry people saying, "No, my chip is a microprocessor. You're entirely wrong."
00:19:08 Bryan: Oh, interesting.
00:19:09 Ken: Generally, I view a microprocessor as being a whole CPU on a chip. Something like the ADA difference.
00:19:15 Bryan: The ADA4004, right? Is the 4004 a microprocessor by that definition?
00:19:21 Ken: It is just barely. As much as I'd like to rule it out, I couldn't find any reason not to call it a microprocessor.
00:19:29 Bryan: Interesting. When we had Tom Lyon on, he actually referred us to Datapoint.
00:19:35 Ken: Oh, yes. I recently bought a Datapoint 2200 that is also on my list of restoring.
00:19:41 Bryan: I’d never heard of Datapoint, and now it's a very interesting company. The Datapoint folks believe that they are part of the reason for the 4004.
00:19:50 Ken: Not quite.
00:19:52 Bryan: Set the record straight.
00:19:54 Ken: There's a lot of interesting history there. First, the 4004 and the 8008 are entirely different chips. Marketing makes them sound like it's just a 4-bit and 8-bit version, but they're totally different. The history of 8008 is Datapoint built this desktop computer out of TTL chips. They were talking to their supplier at Intel and said, "Would you be able to put this all in one chip?" The guy at Intel said, "Yes, sure. I think we could do that." Intel went off and basically spent a year doing nothing.
Datapoint also talked to their TI supplier and said, "Could you put this all on a chip and make a processor on a chip?" TI eventually built a chip. Intel also built a chip, which was the 8008, so TI’s chip never really caught on anywhere. Datapoint decided the 8008 was too late for them, so they built a different TTL version of their processor. Intel had this chip and was like, "Well, I guess we should just sell it as a product." They turned it into a microprocessor product, and it was really a clone of the Datapoint 2200 processor.
00:21:01 Bryan: Interesting.
00:21:02 Ken: Intel doesn't like to acknowledge this, but the 808 turned into the 8080 that led to X86. Basically, most of the desktop computers today have their roots, their instruction set coming from this mostly forgotten Datapoint 2200 desktop computer.
00:21:22 Steve: Datapoint was not using them as a contractor. They're just like, "Hey, if you could go build this for me, we might use it for Intel"?
00:21:28 Ken: Yes, basically. The problem was- it was a low priority for Intel, and by the time they were done with the chip, Datapoint could do things faster with improved TTL chips like the 74181 ALU chip, so they were like, "Thanks, but no, thanks."
00:21:44 Bryan: Meanwhile, Intel finds or use for this thing in the broader market.
00:21:47 Steve: Yes, they get to keep the IP.
00:21:48 Bryan: It's a pretty great story. The Datapoint folks claim that that was the first instance of a register, that I found to be suspicious. Is that true, do you think?
00:21:56 Ken: Well, I guess it depends on how you define registers. Old IBM computers in the 1950s had registers all the way through the 7090 manual from over here.
00:22:07 Bryan: They all have registers, I'm not sure why they- but apparently, the naming of the registers did come from the AX, BX, CX, DX?
00:22:15 Ken: Yes, they had the A, B, C, D, E, H, L registers, which- those names are still with us.
00:22:23 Bryan: Albeit having been extended many times over. That's a very interesting history. You've got a 2200?
00:22:28 Ken: Yes.
00:22:29 Bryan: That's great, and you're going to get that thing-- Does it work? No.
00:22:33 Ken: No.
00:22:33 Bryan: We know it's not going to work when you're done with that, but-
00:22:36 Ken: Well, that's why I'm trying to move towards working rather than away from working. One other interesting thing about the Datapoint processor is it was a serial processor. It operated on 1-bit at a time, which made it very slow. That's basically why the X86 is little-endian because if you're operating on 1-bit at a time, you have to start at the lowest bit of the lowest word, and work your way through. That ended up putting the low-order byte before the higher-order byte in memory. When they built the 808, they copied this architecture, so that's still with us today.
00:23:18 Bryan: I mean, the endianness wars are in such the distant past, but you can see-- If you build a big-endian machine and you use them, I'm like, "Are you kidding me? Little-endian makes no sense at all." Steve, I'm going to assume, I think it's a fair assumption that- do you what little-endian- [crosstalk]
00:23:34 Steve: No. Before that, I was just going to ask- it was serial in architecture because that was the only choice at the time?
00:23:40 Ken: Well, basically, that saved you a lot on hardware because you only had to build a 1-bit ALU. You build a 1-bit data bus, and you just shoved each bit through one at a time.
00:23:51 Steve: So it was for cost efficiency. [crosstalk]
00:23:51 Bryan: Package efficiency as much as anything, right, I would assume or-
00:23:55 Ken: Well, package efficiency, cost efficiency. Remember, they were building this out of individual TTL chips. It meant they could use one chip instead of eight chips for each part of their bus.
00:24:07 Bryan: All right, Steve, I feel you need an explanation of little-endian versus big-endian.
00:24:10 Steve: Definitely.
00:24:11 Bryan: All right. Ken, you want to--
00:24:12 Ken: No, I'm probably going to get backwards. [laughs]
00:24:15 Bryan: Damn it, I was hoping I could trick you into doing that. I'm definitely going backwards. When you look at a word in memory, the question is, where is the most significant bit of that? Is the most significant bit at the high order bit? Or is it at the low order bit? When you actually look at a word in memory, it's much more intuitive if it is big-endian, so if the high order bit is the lowest bit in memory of a 32-bit word, and little-endian has that reversed, right? I think I've got it--
00:24:42 Steve: Or the opposite. [chuckles]
00:24:43 Bryan: No, but when you look at a raw dump on x86 being interpreted little-endian, you've got to reverse everything in your mind. It's actually a real pain in the ass to look at little-endian.
00:24:53 Ken: If you have the hex number one, two, three, four, do you store that as one, two, and then three, four? Or do you store that as three, four, and then one, two?
00:25:01 Bryan: Yes.
00:25:02 Ken: It's not nearly as annoying as the Xerox Alto where everything was in octal. If you've got two ASCII characters and your 16-bit word, and you're just split in octal, they're broken not on a character boundary, it's impossible to figure out what's going on.
00:25:19 Bryan: Wow, because you're trying to restore an Alto now, right? Did I read that correctly?
00:25:24 Ken: Yes. We got the Alto working a year or so ago.
00:25:27 Bryan: Wow, okay.
00:25:29 Ken: We got a lot of the software running on it. We got the original WYSIWYG text editor running on it.
00:25:36 Bryan: Wow.
00:25:37 Ken: It's interesting to see in an Alto- it's basically the first machine that was using a GUI Windows mouse. The laser printer was invented for the Xerox Alto.
00:25:47 Bryan: That's right, yes.
00:25:48 Ken: It's interesting to see how they were developing things like scroll bars, everybody wrote a totally different scroll bar for their program.
00:25:55 Bryan: Charles Simonyi is down there working on that at that time, right?
00:25:59 Ken: Yes. Then he left, he went to Microsoft, and wrote Word there, taking a lot of ideas from the WYSIWYG editor they developed called Bravo.
00:26:07 Bryan: Bravo, that's right. Interesting. You got Bravo to work?
00:26:11 Ken: Yes.
00:26:12 Bryan: Wow.
00:26:13 Ken: It's a combination that's surprisingly powerful for that time, but extremely clunky. It has a lot of modal things. It's like using VI but you're always in the wrong mode.
00:26:24 Bryan: Oh, interesting.
00:26:25 Ken: You had all your bold text, font sizes, all that appeared nicely on the screen. One bizarre thing is you could use this to write your code. Your code could be written with centered text, bold text, different fonts.
00:26:37 Bryan: Oh my God. What a terrible idea.
00:26:39 Ken: The compiler would just compile it anyway.
00:26:41 Bryan: Oh, I know it feels like a good idea, but it's a terrible idea. Do you use syntax highlighting when you write code? I know this is what makes me a fossil.
00:26:50 Ken: I used to just because the editor does it by default and I'm too lazy to turn it off.
00:26:54 Bryan: Yes, I make sure that my editor knows that I want to be treated just like VI. I know, Jess. I know, I know.
00:27:01 Jessie: No, I know people will do that. There are people on the go-team that did that.
00:27:04 Bryan: I don't need syntax highlighting when I read a book. If I need syntax highlighting when I'm reading a program, I just feel like something is-- I know I'm very out of step here. It's me.
00:27:15 Ken: Well, I found out amazing things like 80-column text that people are using now, have their roots back in the days of punched cards.
00:27:23 Bryan: Where does that come from? This does get to a bit of a hot bunch because this is actually a golden ratio issue, more than anything else to me. I'm sorry, where does the 80 columns from a punched card come from?
00:27:36 Ken: It goes back to the 1890 census when they invented punched cards because they couldn't process the census data otherwise. Then in the 1920s, IBM discovered they can fit more data onto a punched card if they used rectangular holes, and it turns out that 80 columns was what they could fit on the size of the punched cards. The size of the punched card was based on the old size of the US dollar because they had [unintelligible 00:28:03] shape the handle parts of that size.
00:28:06 Bryan: No, that's just to my point, it's a golden ratio thing. It's like, why is the dollar shaped the way the dollar is shaped? It's a golden ratio. Here's my belief. If you take any book written at any time and open up to any page, and you count the number of characters in a line, you get between 65 and 75 characters. We don't read lines that have got 150 characters in it. Look, I'm an 80-computerist, I have to make history fit my belief.
00:28:36 Ken: Then there's line printers which used 132 columns, so that ruins your theory.
00:28:41 Bryan: I reject those.
[laughter]
00:28:42 Bryan: No, I'm sure at the time, there were people that objected to those line parameters as having columns that were too wide. I think it's too cognitively wide. It's like, why 132? Why not 1,320?
00:28:57 Jessie: Okay, that's way too long.
00:28:58 Bryan: Oh, that too long? Okay. Well, then clearly, there is some width that is-- Anyway.
00:29:04 Ken: It just amazes me that this decision to use 80 columns on a card that were out of 1920s technology, people are still using 80 columns on their code today, just for historical reasons.
00:29:19 Bryan: It's not historical reasons, it's cognitive reasons.
00:29:21 Ken: Then there's 72 columns that some people use, which is because on the original IBM computers that they wrote Fortran on, it was a 36-bit machine that read two 36-bit words, and with cards, it could only read 72 columns of the 80-column card.
00:29:38 Bryan: I'm not a 72-column person, so I feel I'm nothing less like antiquated, but Jess gives me a look like, "Same difference."
[laughter]
00:29:48 Jessie: I mean, there's 80 characters. It could be 88.
00:29:52 Bryan: I'm just saying.
00:29:53 Ken: I'm not going to get you started on tabs versus spaces.
00:29:56 Bryan: No, actually, you know what? Actually, honestly, tabs versus spaces, also, it has been great on the podcast hearing about like the Teletype 33 and appreciating the efficiency argument for tabs versus spaces, which I never really appreciated. Tabs versus spaces is less important to me than 80 columns actually.
00:30:13 Jessie: Wow. Okay. That's interesting. I just feel like if you're going to die on one of those rows, you die on both. [crosstalk]
00:30:20 Bryan: No, I'm definitely dying on any column that would-- Jess is just like, "I started a company with you. I have shackled my future to a crazy person."
00:30:25 Ken: You don't mess with this 80-column prescription. [crosstalk]
00:30:27 Jessie: I definitely- I would not go above a hundred, but there are some times where I just don't want to cut it off in the middle of a word.
00:30:34 Bryan: I know, but then you reformat, so it can fit within the 80 columns that God or the 1890 census as it turns out, that did it.
00:30:39 Jessie: I definitely do that. I start out with a file and it's in 80 columns, but then if it's marked down and then I want to add some words in, it's like, "I don't want to have to reformat the whole file as [unintelligible 00:30:48]."
00:30:50 Bryan: That's where you got to get like GQ at the-- Them can reformat that for you.
00:30:58 Jessie: Then your dif versus being just the "and" is just this whole huge dif.
00:31:00 Bryan: That is true. That is true. That is undeniable. Okay. If that is the only condition under which you go to the 100th column, I honor it, I also question that. I don't mind. I wouldn't take a part of the good history-- I do think it's a cognitive load thing for me.
00:31:12 Jessie: Okay, that's fair.
00:31:14 Bryan: Sorry, Ken, you're wondering like, "What the hell did I wander into? I've wandered into some sort of dispute."
00:31:20 Ken: Well, the other approach is to avoid columns altogether. I've been using an analog computer where everything is wired up using a patch panel.
00:31:28 Bryan: Oh, there we go.
00:31:29 Ken: It's literal spaghetti code by the time you've got wires everywhere.
00:31:33 Bryan: We got to take a quick break. I want to hear more about this. We'll be back with more from Ken Shirriff on On The Metal. On The Metal is brought to you by the Oxide Computer Company where we're going to try a new feature shamelessly ripped off of Reply All's Yes Yes No, where our boss, Steve Tuck, brings us a tweet he does not understand, and Jess and I try to explain it to him. Steve, do you have a tweet?
00:31:57 Steve: I sure do.
00:31:58 Bryan: Go for it.
00:31:59 Steve: The tweet in question, UEFI pre-boot network stack engaged the onboard NIC in such a way that it would write back DMA to particular physical memory pages sometime after control was passed at the bootloader. Corruption would occur somewhere in the user parts of the RAM disk. No idea.
00:32:17 Bryan: No idea, Jess, do you understand this tweet?
00:32:19 Jessie: I understand definitely the part about the UEFI pre-boot networking stack, but the part about DMA is in question marks. I guess not really sure where that's going.
00:32:31 Bryan: You're overthinking it. I understand this tweet. Running on-prem is painful. This is dealing with this awful, awful firmware bug. The firmware has overwritten part of the operating system in a way that is extremely painful to debug.
00:32:44 Steve: Who do you go to in that case?
00:32:45 Bryan: Who do you go to?
00:32:46 Jessie: You definitely strangle one of your vendors.
00:32:49 Bryan: You strangle one of your vendors, and unfortunately, your vendor is a PC vendor because all of the existing computer companies are selling personal computers. What we need is a new computer company.
00:32:59 Steve: This is just saying, "I'm in intense pain trying to run systems on-premises."
00:33:03 Bryan: That's exactly what it's saying. Steve, what can someone do if their intense pain running on-premises?
00:33:07 Steve: Well, if someone is running in intense pain on-premises, what they should do is go over to Oxide.Computer to learn a little bit more about how we are going to take that pain away.
00:33:15 Bryan: Help is on the way. Join us at Oxide.Computer.
00:33:19 Jessie: You are not alone.
00:33:30 Bryan: All right, we're back. Ken, I want to hear about the analog computer and the patch panel.
00:33:33 Ken: A friend of mine got an analog computer from an auction.
00:33:37 Bryan: What year are we talking?
00:33:38 Ken: This one's 1969.
00:33:40 Bryan: Who is making an analog computer in 1969?
00:33:42 Ken: It turns out analog computers are actually not the hideous backward things you would think of at this point. At that time period, analog computers could calculate differential equations essentially instantaneously. A digital computer would be turning away for a few minutes to your step through a differential equation. They'd give you a lot more speed. You could interact with them. They were good for real-time things, flight simulators.
00:34:08 Bryan: Interesting. You know that there were analog computer dead-enders in 1969. "Let's see your digital computer do this." [crosstalk] That's amazing. When was that no longer the case? When did the digital computer beat an analog computer?
00:34:22 Ken: Well, in a lot of it was application-specific. Up to the '70s, your analog computer is still held on in some places. Once a digital computer could do things faster than an analog computer, it was way more accurate. The thing with an analog computer is, you have voltages representing all your values. You have op-amps to add things up. You have capacitors doing integration. It's all electronic components that you're basically wiring up by plugging wires into a patch panel, like an old modular synthesizer.
00:34:52 Bryan: I am feeling shortness of breath thinking of this. If you've dealt with analog, it's a terrible, terrible world. Analog-- [crosstalk]
00:34:57 Jessie: It seems cool though.
00:34:59 Bryan: Oh my God.
00:35:00 Ken: The computer is full of these very high precision components, like, normally electronics uses 10% tolerance resistors, 5% accurate resistors, these are .01% accurate.
00:35:11 Bryan: A bad resistor or bad capacitor means like a wrong answer.
00:35:15 Ken: Because in an analog computer, your results depend on the accuracy of the components. If you want to be within .01% accurate, your components will have to be that accurate.
00:35:25 Jessie: That's terrible.
00:35:26 Bryan: Yes, go debug that.
00:35:27 Ken: That's one of the huge advantages of digital computers. Your components can be pretty inaccurate. They just have to be able to tell a 0 from a 1. By stringing enough bits together, you can get as much accuracy as you want.
00:35:38 Bryan: If a digital computer doesn't work, it doesn't work as opposed to giving you the wrong answer.
00:35:42 Ken: Well, back in the old--
00:35:44 Bryan: Okay. You're right. Asterisk, asterisk, asterisk, yes.
00:35:44 Ken: It's kind of funny. On IBM scientific computers, they didn't really have any error checking. They figured scientists were smart enough to notice if the answer came out wrong, but the business computers, they were just crammed full of error checking those, parity checking everywhere. Their printer had like four different types of checking to make sure that it was printing the right character because in a business environment, if you're printing out checks and that accidentally prints a nine, where there shouldn't be a nine, this is costing you real money.
00:36:11 Bryan: Wow. That's really interesting. All of the reliability came up on the commercial side.
00:36:15 Ken: Yes because that's where it was important and people were willing to pay for it.
00:36:19 Bryan: What were some of the first machines to begin to have error-correcting codes, or was that very early?
00:36:24 Ken: That went back very early. It's amazing reading old stuff, just how worried they were about reliability, that if your component is going to fail after 1,000 hours and you have 10,000 components, you're only going to get a few minutes of work out of your computer. There was a lot of research into how to build things reliable, how to have multiple things running in parallel. Then it turns out they could just build components reliable enough that you don't need to worry anymore.
00:36:53 Bryan: Yes, right.
00:36:54 Ken: Nowadays your computers have billions of transistors and you just don't worry about them failing.
00:37:00 Bryan: Well, we worry about them failing, but especially as the speeds get so high, you do actually need a lot, but it's the underlying transistors are much more reliable certainly. We still definitely need-- Well, you were around at Sun for the Ecache Parity, right?
00:37:14 Ken: Oh, yes. That was just a nightmare.
00:37:17 Bryan: Oh, yes. There were so many. There were a lot of problems with that. Turns out having radioactive boron in your SRAM is a very bad idea, but it's interesting, this analog machine, did you guys actually- did you get that working?
00:37:29 Ken: Unfortunately, it didn't come with any documentation.
00:37:32 Bryan: Oh, no.
00:37:33 Ken: I've been reading all these old books from the 1960s on analog computers, and we've also been tracing up the circuitry trend to understand how it works. I've implemented some simple differential equations. I managed to get a nice sine wave out of a second-order differential equation.
00:37:49 Bryan: Oh my God.
00:37:50 Ken: The weird thing about analog computers is that differential equations are really what they're designed to do. With a capacitor and op-amp, integration is pretty much trivial. You just do a few layers of integration, wire the results back in, and boom, it solves your differential equation as fast as you can watch.
00:38:07 Bryan: Are you finding it programmable? You finding it relatively easy to program? Honestly, the closest I've come to crying while working on an assignment was my A to D lab in school. I thought I was going to break down. I had a bad bypass cap and I thought I was going to weep.
00:38:23 Ken: We're still just getting very limited stuff out of this. It's a whole different world trying to do stuff with analog computers. Mark, the guy I'm working with, wants to build a flight simulator out of it, and I'm like, "How about if we just make a sine wave?"
00:38:40 Bryan: Yes. It sounds like Mark may be a bad influence or a good influence, I guess, depending on your perspective.
00:38:46 Ken: It's interesting looking inside this because each op-amp has a whole circuit board, and this was the era where they had an op-amp on a chip, but it was just not accurate enough.
00:38:56 Bryan: Is it a transistor-based op-amp though in 1969?
00:39:00 Ken: It's an integrated circuit that's an op-amp. It didn't have the characteristics they want. They put the op-amp chip on the board, then they have a whole bunch of other stuff on the board to get the op-amp to work accurately enough. They have this chopper where they chop the signals at 400 hertz, they send part of it through the op-amp part of it through a different amplifier, and then they merge the signals together. This solves most of the problems that op-amps had back in those days.
00:39:26 Bryan: Do you have schematics for this thing? Are you figuring all this out?
00:39:29 Ken: Yes, no documentation, so I had to stare at the circuit board and trace it out and try to figure out what's going on.
00:39:34 Bryan: It's a lot of time with a scope, I assume.
00:39:36 Ken: Yes, I've got a lot of patience. [laughs]
00:39:41 Bryan: That's otherworldly. That's amazing. You found this at auction. What was the machine used for any idea where it came from?
00:39:48 Ken: This was made by a company called Simulators Incorporated, which is one of the more obscure analog computer vendors.
00:39:56 Bryan: [crosstalk] As opposed to your household analog computer vendors.
00:40:00 Ken: Well, even among analog computer vendors, they were an obscure one. EAI was one of the big names.
00:40:06 Bryan: EAI.
00:40:07 Ken: This computer was used at the University of Alberta in Canada probably for education, maybe for some unlucky grad students' project. They finally got sold off. Now, we have--
00:40:21 Bryan: Yours is in working enough condition it sounds like. It sounds like the--
00:40:24 Ken: Well, there are a few bad parts we had to replace. Some of the components don't seem to have quite the advertised accuracy 40 years later.
00:40:32 Bryan: Wow, that is really interesting. In the objective, are you actually going to follow Mark on this flight simulator? Are you going to stop at the sine wave?
00:40:41 Ken: We'll probably go a little beyond the sine wave, but Mark should probably be stopped from his full plan of implementing Apollo on this machine.
00:40:49 Bryan: Oh, really?
00:40:50 Ken: It doesn't have enough op-amps for once. He's like, "Well, let's make more op-amp boards and plug them in." I'm like, "That's a crazy idea."
00:40:57 Bryan: Yes, I guess everyone needs a friend that's going to get them into some amount of trouble, but not too much trouble.
00:41:03 Ken: Probably my goal with an analog computer is to build the Lorentz oscillator, which is a chaotic system. That gives you a really nice chaotic display on your solar scope.
00:41:13 Bryan: Yes, that'll be fun to watch.
00:41:14 Ken: That looks like it's within the capabilities of this analog computer and the capabilities that we need to plug in a whole bunch of wires into a plug panel without getting one of them wrong.
00:41:23 Bryan: In doing this, do you become more of a digital person and using this thing? Do you feel like these machines are misunderstood and they should be used for more? Or are you just like-- I would be questioning my life choices doing this thing.
00:41:33 Ken: Well, I'm quite happy to be using digital computers now. It does give me more appreciation for them, that before I looked at it, I thought that analog computers were just this pointless dead-end that people did for no good reason in the '60s. Now I understand that there were good reasons to use them for a lot of applications.
00:41:50 Bryan: It was actually a very useful important dead-end. It'd be interesting when the last analog machine was made, but obviously, they fell out as you said in the '70s. One of the other things that you did that I was
really interested by is, you took apart some of the cryptocurrency protocols, I think the Bitcoin protocol. Did you have a 1401 mining cryptocurrency? Did I read that correctly?
00:42:10 Ken: Yes. That was a lot more speed than when I tried mining it by hand. You should check out my video--
00:42:18 Bryan: Is this one of Mark's ideas?
00:42:20 Ken: No, this was my own idea. I figured that the hash algorithm used by Bitcoin, the best way to understand it would be to just try mining by hand. It turns out that it's pretty simple bit operations. You can just sit there with a piece of paper and go through the mining operations, doing the XORs, doing the N. Of course, it would take me more than a day to just do one hash. It'd take way longer than the age of the universe to actually mine a Bitcoin by hand, but it was a fun project.
00:42:51 Bryan: Was it educational?
00:42:52 Ken: It was very educational. I put a video on YouTube, and I expected that maybe a dozen people would want to see this, but it turned out to be surprisingly popular.
00:42:59 Bryan: Oh, people watch these unboxing videos of people unboxing toys or whatever, and there will be like, six million views on it. I think people will [crosstalk].
00:43:07 Ken: I click to 60 million.
00:43:08 Bryan: Yes, 60 million, exactly. I think that people be would be into it, I imagine. They must be mesmerizing. How long is your video?
00:43:15 Ken: It's about 15 minutes. I fast-forward through a lot of it.
00:43:19 Bryan: How long did you spend mining by hand?
00:43:22 Ken: I forget the exact time. I think it was about an hour to just do one cycle of hash algorithm.
00:43:28 Bryan: A lot of people say they are extraordinarily patient. I think you may be at a different tier of extraordinary patience. You know at Alex Honnold, the climber? He actually submitted to an MRI, and they discovered that he's missing the fear center of his brain. It's like he doesn't have fear. Is it possible you don't have impatience?
00:43:45 Ken: I got my MRI once, and they said everything looked normal.
00:43:49 Bryan: Were they aware that you have mined cryptocurrency by hand? Maybe you should give this more details, whatever, they work for some things.
00:43:54 Ken: They should have looked for the cryptocurrency center in the brain.
00:43:56 Bryan: Yes, exactly. There would have been like, "It's all dead." Jess, how many views do you think is YouTube video got? Mining cryptocurrency with a pen or pencil and paper?
00:44:05 Jess: A lot. Thousands.
00:44:08 Ken: It is more than thousands.
00:44:08 Jess: A hundred thousand.
00:44:10 Ken: What do you think?
[00:44:10]
Bryan: I think the most seen video I've ever done there was 170,000, so I'm going to say it's more than 170,000. I think it's going to be that Brendan screaming at the disks was a million, believe it or not.
00:44:21 Jess: That's a very popular video [crosstalk] screaming in the data center.
00:44:24 Bryan: I know. YouTube was convinced was convinced that I was some masterful content creator after that thing. They kept wanting me to participate in revenue sharing programs. I'm like, "No, you understand. That's the only one I got."
00:44:32 Speaker 4: 1.2 million.
00:44:34 Bryan: That's a lot. That is a lot.
00:44:34 Jess: Whoa, that's nuts. Well, because the cryptocurrency community is huge, and they're like- probably, I don't know.
00:44:41 Bryan: Yes, that's a lot. What are the comments like on that thing? YouTube comments are bad.
00:44:46 Jess: Oh, they're terrible.
00:44:46 Ken: I don't even read the comments on that video.
00:44:48 Jess: You're never in the comments.
00:44:48 Speaker 4: Oh no.
00:44:49 Bryan: Listen, even the world's most patient man doesn't read the YouTube comments. I've got the patience to mine cryptocurrency by hand not read YouTube comments.
00:44:58 Ken: I also implemented Bitcoin mining on the IBM 1401 punch card computer, which was surprisingly inconvenient because it's a decimal computer. It's doing decimal arithmetic, which is really not a good match for the binary operations in Bitcoin mining.
[00:45:14]
Bryan: Right. That must have been-- How did you get that? What are you implementing it in?
[00:45:21]
Ken: Assembly language.
00:45:21 Bryan: Assembly language, okay.
00:45:23 Ken: Then I'm just going run a whole bunch of punch cards and running it through, and the console lights flashing in a really dramatic way when it's mining.
00:45:31 Bryan: Oh, nice.
[00:45:32]
Ken: Then I also did a mining on the Xerox Alto, which was pretty fast compared to doing it by hand and the Apollo
00:45:40 Bryan: [laughs] That's good. This does, computer's fast, compared to doing it by hand.
00:45:45 Ken: Also the Apollo Guidance Computer. We got an Apollo Guidance Computer, the computer that was used to land on the moon, and I figured what to do with this. Mine Bitcoin.
00:45:59 Bryan: Mine Bitcoin. Were you doing it in an era that was early enough that you could actually reasonably mine?
00:46:06 Ken: Since Bitcoin didn't exist back then.
00:46:09 Bryan: You're right, of course. Oh, yes, right of course.
00:46:11 Ken: It shows that the technology theoretically was there for people doing- could have been doing Bitcoin mining. You might wonder about using a punch card computer, but even in the 1960s, IBM had networking that they connected 1401s together. It was basically used for the first computer communication by satellite. Theoretically, you could have had a bunch of computers mining Bitcoin and connected by satellite and in the '60s.
00:46:37 Bryan: Wow. I was introduced to the 1401. I had obviously heard of the 1401, a very important computer. I guess the IBM's real first is the 650 is their first commercial computer, but the 1401 is the first one that goes really mainstream. Is that right?
00:46:51 Ken: The thing about the 1401 is it was a very, very low-end computer. It was designed to rent for $2,500 a month. It really opened up the computer market to medium-sized businesses. Instead of computers being something that only giant companies or the government had, they ended up with over 10,000 1401s. It really made the computer more of a widespread democratic thing rather than a giant room filling government-owned thing.
00:47:21 Bryan: That's interesting. I firstly, was exposed to the 1401 in my career when talking to a bank right after the Y2K, went for Y2K. According to them, anyway, 45% of their Y2K problems were from the 1401. Apparently, the particular the 1401 does not have a way to represent years in the 21st century.
00:47:40 Ken: I don't think they could blame the 1401 on what's happening in Y2K directly. The thing is that when you're putting your data on a punch card, you've only got 80 columns for all your data. You need to have, depending on application, you'd have employed number, you'd have your dollar amount, you'd have all this information. It's hard to cram everything into just 80 columns.
00:48:03 Bryan: Oh, interesting. You think that it was an 80-column limitation? You're not just saying that to side with Jess on this. You don't have to do that.
00:48:09 Ken: No.
00:48:09 Bryan: Okay.
00:48:10 Ken: You're trying to make your data as compact as possible. If you could use a two-column date, rather than a four-column date, you're going to put two-column date on your card. Back in 1960, why would you possibly care about being out of the 1900s?
00:48:28 Bryan: Right. Well, and I think that you would not imagine that the software would outlive the hardware. I think that would be an idea that would be incredibly foreign in the '60s.
00:48:37 Jess: Oh, yes. That's super weird.
00:48:38 Bryan: Which now we totally accept. The machines that you look at and restore, one question, I definitely wonder is, what is the oldest computer in production?
00:48:49 Ken: You'll get in a lot of issues of trying to get, what's the oldest? I believe they've restored a Colossus from World War Two in England. That was basically rebuilt from scratch because they destroyed the whole Colossus codebreaking computer for security reasons. It's more of a replica than a--
00:49:10 Bryan: Do you think there are still IBM 360s running in production somewhere, that are actually doing useful things? There can't be, right?
00:49:17 Ken: I know of a company that is using a punch card accounting machine, a pre-computer machine for their business.
00:49:24 Bryan: Wow. Are they aware of what happened since then?
00:49:28 Ken: Yes. The Computer History Museum has tried to talk them into giving their computer to the Computer History Museum. The Computer History Museum will give them a modern desktop computer, but--
00:49:39 Bryan: Right. They don't want it.
00:49:39 Ken: The owner is like, "Everything works fine the way it is, why should we change?"
00:49:43 Bryan: Wow. Literally, the Computer History Museum, it's like, "Oh, the Computer History Museum won't leave me alone, they want our IT infrastructure."
00:49:49 Ken: Yes. There's this whole world of accounting machines that existed before modern digital computers, that companies would use. They put their data on punch cards. The accounting machine has electromechanical counters that would add stuff up, so you would end up running your data through. It would print it out on paper, printed sums. You count up your totals per department or whatever. This was all electromechanical before they were even using vacuum tubes.
00:50:20 Bryan: Wow. These are in the '20s and '30s? It means that early?
00:50:23 Ken: Back in the 1890 census, they had basic simple counting machines, and then it developed from there more advanced things. The counting machines got pretty advanced. You could count up total, subtotal, sub-subtotals. You could do multiplications if you worked really hard at it.
00:50:40 Bryan: Have you played around with these machines? Have you tried to get hold of one of these counting machines?
00:50:44 Ken: I've seen them, but never actually programmed one myself.
00:50:48 Jess: That's cool.
00:50:49 Ken: The programming was all done [crosstalk]?
00:50:50 Bryan: Yes, it was programming.
00:50:51 Ken: Programming was all plugboards.
00:50:52 Bryan: Plugboard, okay.
00:50:53 Ken: Basically you'd connect your wire for card column one goes into this counter. Card column two goes into this counter. The output from this counter goes under printer column four. Our print from this goes into the printer column six. This goes back to the if you're doing dates you're not going to want to connect four wires and use four columns when you could just use two wires and have two dates.
00:51:14 Bryan: This is not a stored-program computer in any fashion?
00:51:17 Ken: The plugboard is removable, so you can store it on a shelf. This is what companies would do. They would actually have shelves with dozens of program boards. You want to do your taxes you pull the X program board off the shelf, you stick it under your computer. You want to do inventories, pull the inventory board off the shelf, stick it under your computer. You'd actually have a library of programs and these physical boards with wires plugged into them stifle.
00:51:42 Bryan: Yes, right. Have you run across any of these?
00:51:44 Ken: Yes. A friend of mine had one of these plugboards, and so I reverse engineered the program on it to figure out how they were doing their taxes using this plugboard.
00:51:54 Bryan: Oh, interesting.
00:51:55 Ken: The boards are just crammed with wires. Wires are plugged as densely as you can imagine.
00:52:01 Bryan: When you're doing this, you've gone through so many different kinds of machines, you must develop an aesthetic for things of like, "This is clever, this is not clever." Are there some historical machines that you think are particularly meriting of study because they do things that are interesting or novel?
00:52:21 Ken: Well, I found that pretty much every computer has its own clever things. Every chip has its own surprises in it. I generally start with the assumption that the people who built this knew what they were doing, and it's up to me to figure out what it is.
00:52:35 Bryan: What a great assumption. I feel like that's not an assumption we often have when we pull software down over the internet. It's like it definitely not an assumption that people knew what they were doing.
00:52:43 Ken: It's very easy when you're looking at old computers to think, "Oh, this is so primitive. Why are the people doing such stupid things." It turns out they were really pretty much doing clever things. They were doing the best they could with the technology they had available. It's interesting to see how they were able to solve very complex problems with things like electromechanical counting wheels.
00:53:06 Bryan: That is such a charitable view to have, I have to say, but that must be--
00:53:10 Jess: When did that die? Because I feel like just when you buy a computer today, I'm not like-- If I was to buy a computer today, I wouldn't be like, "Oh, I really cherish."
00:53:19 Bryan: These people are [unintelligible 00:53:20] either way. These people are doing--
00:53:21 Jess: Just like the thought that they put into this, it's more like, "Who do I tell that this thing is broken?"
00:53:26 Bryan: When did we lose that? Was it when we really invented firmware? Was that when we lost it?
00:53:31 Ken: I think it's a combination of good things and bad things in every system. I try to look at the good parts, and not so much the bad parts.
00:53:40 Jess: That's fair.
00:53:41 Ken: Old IBM computers, it's interesting because there's some things where they push the technology as far as they could to be innovative. There's other things where they just kept old technology and really didn't innovate it. You'd end up with an old keypunch keyboard would end up being used in the IBM 360 console, even though it made no sense, it's just they had this--
00:54:05 Bryan: That was what was around.
00:54:06 Ken: That was what was around. It had all this electromechanical things inside that were designed for punching cards, and they would end up still having that, even though there was no point in it still working that way.
00:54:19 Bryan: There are so many of these things that they tried really hard to get working, and they were just at the limit of the physics. Didn't you do something on phosphor-based memory, where you're actually using a cathode ray tube for actual memory?
00:54:30 Ken: I haven't used those personally, but I know people who have way back in the day. It turns out that memory was really the hard part of early computers. Building a ALU, building control circuitry, that's pretty straightforward, but building memory, that's hard. You'd end up with things like mercury delay lines, where you'd send sound pulses through a tube of mercury, and then get the sound pulses out the other end. You could store your thousand bits that way. That had a lot of obvious disadvantages.
[laughter]
00:55:01 Bryan: Right, toxicity.
00:55:02 Ken: Toxicity. Your data was all serial, that if you wanted data, you had to wait for the data to come out the other end of the tube. This was rapidly replaced in the 1950s with these CRTs called Williams, where you'd put a dot for a zero, and a dash for a one on the screen, and you could electrostatically read the data out.
00:55:25 Bryan: Which just seems bonkers. When you look at something like that, at that time, I guess that feels like a viable path. How is that ever going to scale?
00:55:34 Ken: Well, it worked through a-- IBM used that in their 701 computers. All the IAS computers used that. People I know who worked with it, said it was very unreliable. You constantly had to be tweaking things. You'd have problems where if you're writing one bit a lot, it could start influencing the bit next to it on the screen, which is exactly like row hammer today with your DRAMs.
00:55:58 Bryan: Monitor hammer, CRT hammer. When did we decide that Williams tubes were not going to actually work out? It must have been shortly thereafter.
00:56:06 Ken: In the mid-50s when core memory came along, literal cores, little donuts, that could be magnetized one way or the other for zero or one, when that came along, that crushed all the previous technologies. It was fast. It was relatively inexpensive. If you get down to one cent per bit, which was inexpensive for the time, you could store megabytes of data if you had a room full of cabinets. Core memory, magnetic cores, they turned out to be a dominant technology up until the '70s when MOS memory came along, and won out.
00:56:42 Bryan: Core memory is still with us in the form of a core dump. Dates from core memory, right?
00:56:47 Ken: Exactly.
00:56:48 Bryan: Core memory is still used in space applications?
00:56:50 Ken: The space shuttles used core memory, but I think it is now entirely obsolete in that.
00:56:56 Bryan: Entirely obsolete, because it also had that advantage of being non-volatile, of course?
00:57:00 Ken: Yes. It's interesting with the 1401 that you can turn on the computer and your program is there. You push the power button, it goes chunk, chunk, chunk as these relays activate the power, and you're ready to go.
00:57:11 Bryan: Because of the core memory? Oh, wow.
00:57:12 Ken: As opposed to a modern computer where you boot it up, and a minute later, it's ready to go. It seems like we've gone backwards as far as the startup time.
00:57:21 Bryan: Well, we keep waiting for non-volatility to actually have the economics of DRAM. We've talked about phase-change memory, and we've talked about the carbon nanotube-based memory. It feels like one of these at some point.
00:57:37 Ken: Flash memory has finally largely killed off the hard disk.
00:57:42 Bryan: Au contraire. The hard disc is alive and well, and it is at much larger volumes. Have you taken apart a hard disk at all? Have you messed around with the modern hard disks?
00:57:56 Ken: Well, modern as in 20 years ago.
00:57:58 Bryan: Helium. Oh, yes. The drive technology has- I'm going to sound like a paid shill for WD or Seagate, but with helium drives and now with what's called hammer and memory heat-assisted magnetic recording and microwave-assisted magnetic recording, they are continuing to drive densities up in a way that you cannot get with flash. The density is much, much, much, much higher. I would say that's going to be alive and well. I think the spindle is going to be with us for a long time to come.
00:58:23 Ken: At the computer history museum, they have a RAM ARC, which was IBM's first disk storage. It's quite a remarkable thing. It's about a six-foot-high stack of disks. The disks are, I don't know, a couple of feet wide. It actually has an air compressor providing the air to keep the heads floating above the disk surface.
00:58:40 Bryan: Right. It's amazing.
00:58:41 Ken: The seek time is awful because it's like these hydraulic arms that go chunk, chunk, chunk, and they'll move the head one disk ladder to another.
00:58:50 Bryan: It's amazing that it worked at all. Do you ever think about the Mars drive from IBM?
00:58:56 Ken: Mars? No.
00:58:56 Bryan: Does it ring a bell? You and Mark need to put this on your crazy list. It would store data on film, and it would film out onto a spinning drum to read it. Then it would take the film off the drum and shove it back into this--
00:59:11 Ken: Was this the mass storage thing where there's just tons of these film strips, and they would--
00:59:15 Bryan: Yes, that's right. Hanging film strips, yes.
00:59:17 Ken: Yes, I think the NSA was a big customer or that.
00:59:20 Bryan: Yes, I think the NSA may have been the only customer, maybe.
00:59:22 Ken: People who know about these say they were terrible.
00:59:26 Bryan: Wait a minute, I thought they were doing the best they could. I thought we were going to have this charitable view. You had inspired me with this charitable view towards everyone's--
00:59:35 Ken: It was probably the best they could do, but it was slow and unreliable and mechanical nightmare moving these pieces of film back and forth.
00:59:44 Bryan: All right. We going to take another quick break, and then I want to come back, and we want to ask you about some things you may see repeating themselves in the future. We'll be back with more Ken Shirriff On the Metal.
[music]
00:59:58 Bryan: On the Metal is brought to you
by the Oxide Computer Company. Take it from Paul Goaz, just go to oxide.computer. Let's please get back to the show. All right, we're back. Ken, one of the things [unintelligible 01:00:09] and I got for you is, have you discovered things in these historical machines that you thought would have new applicability given some of the changes in technology?
01:00:20 Ken: It's hard to think of any lost ideas I've discovered that really should be brought back.
01:00:26 Bryan: Oh, damn it. God, Jess, that was my big plan. I thought we're going to have Ken on the podcast, we're going to discover some nugget and then no. Okay.
01:00:36 Ken: I'm not going to say vacuum tubes, we realized should go back to those. That's some of the advantages.
01:00:43 Bryan: I just wonder if there are ideas where you're just like this idea did not work when originally tried. Because we do see this, where your ideas were tried at an earlier time, and then the later process advances and what have you make something more viable than they once were.
01:00:58 Ken: Well, I think there's the wheel of reincarnation in a lot of ways, that you have things like computers being centralized and then being decentralized, becoming centralized again to the cloud. As you look over history, you see that there's been a lot of cycles of this, where things have been moving back and forth. Do you want all your data, all your computing in one place or do you want it out in the cloud and you're using it remotely?
01:01:24 Bryan: It does seem to be the swinging pendulum between centralization and decentralization? We've seen that a couple of times, I feel.
01:01:28 Ken: Yes.
01:01:29 Bryan: Even in our own lifetimes, we've seen that, right?
01:01:31 Ken: People think that the cloud is a new thing. You look in the 1970s, remote computing was becoming very popular.
01:01:39 Bryan: It was the compute utility, isn't that what they called it?
01:01:42 Ken: It's had so many names that-- I read these names, it's like, are you talking about something I know about or is this something entirely different? I think by looking at computer history, you realize that a lot of ideas we think of as new really go back to the 1960s. Some of them are just becoming popular in new ways. Others were just not feasible back then, and now they are. Things like computer graphics, they were doing computer graphics in the 1960s but when you have limited memory, there's very little you can do. Having a lot of memory in GPUs just solves so many problems for you. Things that were hard problems then are now just trivial.
01:02:19 Bryan: Right, and things like virtualization, obviously done in the 60s, but then we went through a long period where it didn't de-virtualize.
01:02:25 Ken: Exactly. Virtualization is one of these ideas that keeps being reincarnated in new ways, moving from mainframes down into smaller computers. I figure it's only a matter of time till we're running virtualized phones, you can run different--
01:02:40 Bryan: There we go, virtualized phones. You heard it here first.
01:02:43 Jess: That would be good for testing.
01:02:44 Bryan: Yes, there you go.
01:02:46 Ken: You have your iPhone and your Android virtual machine on the same phone.
01:02:51 Bryan: You could use that to your virtual phone, you could use that to confound Google Maps to convince it there's a traffic jam. This other guy took 90 phones and walked it in a wagon to convince Google Maps.
01:03:03 Ken: Yes, that was pretty [crosstalk].
01:03:04 Jess: Really?
01:03:05 Bryan: Yes, it was the traffic flip.
01:03:05 Jess: Really?
01:03:06 Bryan: Yes. It was pretty cool, how [unintelligible 01:03:06].
01:03:06 Ken: Just a couple of days ago.
01:03:08 Bryan: Just a couple of days ago. That was good.
01:03:10 Jess: For Waze or just Google Maps?
01:03:11 Bryan: Are those the same thing?
01:03:13 Ken: No.
01:03:13 Jess: Oh, they bought it right? Or no.
01:03:15 Bryan: No, they bought it, and they're also not the same thing.
01:03:17 Ken: Well, I used to work on Google Maps, and Google Maps and Waze sat in the same building nearby and sometimes communicated with each other.
01:03:26 Bryan: Weren't they solving the same problem? I'm sorry to be stupid here, but are they solving the same problem?
01:03:31 Jess: They are.
01:03:32 Bryan: Does that stop companies from--
01:03:33 Ken: No. Of course not.
01:03:35 Jess: Organizational dysfunction.
01:03:36 Bryan: What's the craziest thing on the list that you've got in front of you?
01:03:40 Jess: What's next?
01:03:42 Ken: From my crazy project?
01:03:43 Bryan: Yes, your crazy project list. What's the absolute craziest?
01:03:45 Ken: Right now, I'm trying to emulate a Honeywell 1800 mainframe, this giant room-filling computer. The reason I want to do that is that we could then run the Apollo Guidance Computer assembler code on that simulation, and then we could compile the Apollo Guidance Computer software.
01:04:03 Bryan: Oh, right now we can't compile it?
01:04:04 Ken: Well, there is a compiler, but it's a modern written one. It's not using the authentic real compiler.
01:04:10 Bryan: [laughs] Nice. It's not artisan. It's not the actual- right.
01:04:15 Ken: The original compiler or assembler has some interesting features, like it will generate the files that were used for the core ropes to wire them. The Apollo Guidance Computer, the way they did their ROMs is they would physically wire through memory cores. If you put a wire through the core, you get a one, if you put the wire around the core, you get a zero.
01:04:36 Jess: That's cool.
01:04:36 Ken: Your program is physically wired into this module.
01:04:40 Jess: That's so cool.
01:04:42 Bryan: It's like sewing instructions in terms of you got to have to stitch this thing properly.
01:04:45 Jess: Because it was actual like it was the memory that you could hand do.
01:04:48 Ken: Actually, a lot of the people working on the core ropes were women who worked in the sewing industry in Massachusetts and had the fine motor skills for doing this wiring.
01:05:00 Bryan: Wow, that must be really hard to get down. Interesting.
01:05:03 Ken: This had a lot of interesting results, such as you had to freeze your code several weeks in advance because it was being physically woven into the--
01:05:11 Bryan: You don't understand. I already wove this. Its like, "No, we always deploy into production." It's like, "No, I know, but actually."
01:05:17 Ken: The programmers didn't like it because they wanted to do these last-minute bug fixes but the managers were happy that they couldn't do any last-minute bug fixes, because this is a software that was being used to land Apollo on the moon.
01:05:29 Bryan: Right. The Honeywell 1800 is the machine that you want to emulate or restore? Do you want to emulate.
01:05:34 Ken: I want to emulate.
01:05:35 Bryan: What's that machine about?
01:05:37 Ken: It's this very weird machine. It's a 48-bit machine. One of its weird features is it has two program counters, and they can both go forwards or backwards.
01:05:48 Bryan: Okay. What does it mean to have two program counters? We're executing two instructions simultaneously?
01:05:55 Ken: It was mostly used for subroutine calls. When you did a subroutine call instead of putting your return address on the stack, you could just switch to a different program counter. Then when you're done with the routine, you just go back to your first program counter, which kind of makes sense.
01:06:11 Bryan: Yes, are you able to remain charitable when looking at an idea like that? Were they doing the best they could or was that a little crazy?
01:06:17 Ken: I'm still at the point of trying to figure out why this is a good idea.
[laughter]
01:06:23 Bryan: God, I so admire this.
01:06:25 Jess: Giving them the benefit of the doubt is nice, though.
01:06:27 Bryan: It's amazing, yes.
01:06:27 Ken: They would also do things like they would be running code, and then they'd switch to another program counter for just one instruction so as to basically reuse an instruction from some other part of the code to save on memory. The control flow, it's just a nightmare. It's just a nightmare trying to figure out what the control flow is in this program because you're jumping between two program counters jumping back and forth.
01:06:52 Bryan: I'm judging that in my mind, and yet we often- not often, but do you know what instruction picking is on SPARC? You've got a delay slot on SPARC previously. If in the delay slot you have a branch, well, it's called the DCTI couple. If you execute the target of the branch of the initial branch and then the program counter will immediately change to the target of the branches in the slot, the branch always [unintelligible 01:07:22] slot. That has the effect of picking one instruction out of a bank of instructions. I have done this, and I feel proud of it. That's what's wrong. This is why I'm glad you're charitable. I hope the future Ken is charitable to the past me.
01:07:39 Ken: Hearing this, I think you'd like the Honeywell 1800.
[laughter]
01:07:44 Ken: That reminds me of something.
01:07:44 Bryan: Wait a minute.
01:07:45 Ken: Speaking of technology coming back around.
01:07:47 ?Bryan: Yes, exactly.
01:07:48 Bryan: That just feels like a value judgment, that I'd like the Honeywell 1800. I might though. I'm intrigued by this. I think it's a terrible idea, and yet it's an intriguing idea.
01:07:59 Ken: Then another crazy project I'm working on is the IBM 360 model 50. Mark bought a console for this computer. This is why there's computer consoles with all the blinking lights, like hundreds and hundreds of lights and switches and everything.
01:08:17 Bryan: Right now, I'm ready to confess to Ken that we've got one of those lights.
01:08:22 Jess: We do.
01:08:22 Bryan: Right. If you look right behind you, see that light right on the top of the filing cabinet.
01:08:25 Ken: Oh, yes. The ready button?
01:08:28 Bryan: Yes. Now, I feel like did we like scalp a machine effectively?
01:08:33 Ken: Well, if we ever need one of these I know who to--
01:08:35 Bryan: Yes, you know who to get to.
01:08:36 Jess: We actually have two of those. It just counts too much to use it.
01:08:40 Ken: Anyway, to get back to my story, he has a console. We figured it'd be nice to have the lights blink. I could stick Christmas tree lights back there and have it blink in a very nice way, but it wouldn't be accurate. What I want to do is have the lights blink and in a very accurate way, which means I have to implement an IBM 360 50 which is a microcoded machine, so I'm busy rewriting the microcode engine to run actual 360/50 instructions in the proper way. I have enough manuals that explain about 90% of what I need to know to make this work.
01:09:12 Bryan: To write the microcode?
01:09:13 Ken: There's these weird corner cases in the floating-point engine that are a little hard to understand. We've tracked down, somebody in Switzerland has the manual for the microcode, and we're trying to convince him to scan it so I can then finish this project. Then, we just need to put it all into an FPGA L drivers for 100s and 100s of lights, and then we can have the console blink in the accurate way.
01:09:36 Jess: That's dope.
01:09:36 Bryan: It had the console blink in the actual, and I don't know if it will be sufficiently appreciated how authentic the blinking of the light is.
01:09:42 Jess: No, it will be. Please, please.
01:09:42 Ken: It is. It will be like, "This is authentic microcoded light like--" That is amazing.
01:09:49 Ken: People who are into this thing will look at restored consoles, it's like, "Oh, that blinking, that's just random. That's no good."
01:09:56 Bryan: That is not an actual, genuine microcode blinking, That's great. Are you writing this from scratch effectively, writing the microcode from scratch?
01:10:06 Ken: Basically, I'm writing the microcode engine and JavaScript over for my first version, and then we'll put it into an FPGA if it actually works, and then we can get more performance out of it.
01:10:16 Bryan: That's great.
01:10:17 Jess: That's cool. Where do you even find one of those?
01:10:19 Ken: This was on eBay.
01:10:20 Jess: Oh, okay.I didn't realize that.
01:10:23 Bryan: How come everyone we have on this program finds great stuff on eBay?
01:10:25 Speaker 4: Every single person.
01:10:26 Jess: Hey, we've found good stuff on eBay.
01:10:27 Bryan: No, I feel like whenever I go to eBay, it's crap.
01:10:29 Jess: No, no.
01:10:30 Bryan: What did you get on eBay that's so awesome?
01:10:32 Jess: The mugs.
01:10:32 Bryan: The mugs are pretty good.
01:10:33 Ken: The story is clock was not from eBay, that was from R & R Auction's, who does a bunch of space auctions.
01:10:40 Bryan: [chuckles] Wow. [crosstalk] This is not a good idea for Jess to hear. I feel--
01:10:45 Jess: There's space auctions?
01:10:46 Bryan: Yes, I know. You don't understand. We have to build a company together, we cannot have Jess spend her life savings on R & R Auctions or worse. Oh wait, Steve, she's going to have like-- Jess is going to come in like, "I figured out what we did with our last round of fundraising. We have bought this nozzle from--
[laughter]
01:11:08 Jess: You say this all like it actually--
01:11:10 Steve: This is going to happen.
01:11:11 Bryan: It feels so plausible.
01:11:13 Ken: Yes, you can get lots of nozzles for a couple $1000. If you wanted--
01:11:18 Jess: Sounds cheap.
01:11:19 Bryan: Oh, no.
01:11:19 Steve: God. Oh, no.
01:11:21 Bryan: Steve, we're going to have to fundraise everything we've got.
01:11:22 Steve: Yes, we have a problem.
01:11:23 Ken: I can hook you up with a guy.
01:11:25 Bryan: Oh no, please don't.
01:11:25 Jess: Oh, yes. This is great. [crosstalk]
01:11:27 Bryan: Bring your neighbor--
01:11:28 Steve: It's be like a year.
01:11:29 Ken: The Apollo Guidance Computer I was restoring, this belongs to this guy, Jimmy Locke, in Texas, who in the 1970s bought two tons of spacecraft from a junkyard in Houston and found the Apollo Guidance Computer in with that scrap.
01:11:43 Bryan: Jimmy, wow, that's amazing.
01:11:44 Jess: That's cool. How much does that go for in an auction?
01:11:48 Bryan: Too much. Way too much.
01:11:47 Ken: R & R Auctions sold one a few months ago for about $350,000.
01:11:54 Jess: Oh.
01:11:55 Steve: Glad you cooled on that one.
01:11:57 Bryan: No, that's the scary number because that number is a lot of money, and yet it is less money than we have raised. You may not stand and raise on a guidance computer.
01:12:05 Jess: I'm not going to do that, that's crazy. That is crazy. Please, I'm not that crazy.
01:12:11 Bryan: We're going to need a space intervention.
01:12:12 Jess: If it was $3,000, I'd be like, "Oh." Maybe questioning it.
01:12:15 Ken: Well, I've seen that before. [chuckles]
01:12:18 Bryan: Okay. This conversation took a turn for the dangerous.
01:12:23 Jess: You're the one who brought it up.
01:12:24 Steve: Let's stick to eBay and the eBay budget limits.
01:12:25 Bryan: Yes, exactly.
01:12:26 Ken: You could have a really nice collection of stuff in your office if you want to.
01:12:34 Bryan: Oh, God. We're going to have the space nozzle.
01:12:36 Jess: No, we just have some silicon wafers.
01:12:38 Bryan: That's the silicon wafers [unintelligible 01:12:39].
01:12:40 Jess: Those are $40.
01:12:41 Steve: You did buy silicon wafers?
01:12:42 Jess: Yes, but you get 20 for $40. That is actually really a good deal.
01:12:47 Bryan: That is a good deal, 20 for $40. We are going to hang up wafers? We're going to do that?
01:12:49 Jess: Yes. Then the fishing wire was $1 or something.
01:12:52 Steve: We are not hanging them up.
01:12:53 Jess: I am.
[crosstalk]
01:12:54 Bryan: No, you're not. No.
01:12:55 Steve: This plan is far along. I had no idea.
01:12:58 Bryan: Okay. Sorry, Jess wants to get a scissor lift, which she herself wants to get on, go up 30 feet and hang silicon wafers in the rafters.
01:13:07 Jess: We measured. It's 12 feet.
01:13:10 Ken: If you wanted me to take a look at your silicon wafers first under the microscope and give you some [unintelligible 01:13:14] and tell you about them, I can do that.
01:13:17 Jess: Okay, yes, we should do that.
01:13:16 Steve: Oh, we have to [unintelligible 01:13:17].
01:13:18 Bryan: We are actually building a computer company, we're not just hanging up wafers. [crosstalk]
01:13:22 Steve: There's a chance for Jess tipping over the [crosstalk].
01:13:22 Bryan: I don't want to give you the wrong impression, but that said, we were inspired by- we had Amir Michael on the podcast. He grew up in Foster City. Dad worked for AMD and he used to put wafers up on his wall.
01:13:37 Jess: So like them.
01:13:37 Bryan: Now, it's [crosstalk]
01:13:40 Steve: Where are he getting his wafers from?
01:13:41 Jess: eBay.
01:13:41 Bryan: eBay. All right, yes. We'll have to get Ken to put them under the microscope, would you mind?
01:13:46 Ken: I'd be delighted.
01:13:47 Bryan: All right. That's great. Do you find that just in general, that the retro-computing guides you at all in terms of the future? Does it feel forward-looking or does it feel merely antiquarian?
01:13:59 Ken: I would like to say something about how looking at retro-computing can inspire people for the future and all this, but really I just do it because I think it's cool.
01:14:10 Bryan: I think it does necessarily.
01:14:11 Jess: I think as well.
01:14:11 Bryan: I think it has actually been really inspiring to look at the stuff that you have done. It is inspiring because it reminds people that the hardware still exists. There is still a hardware-software interface and the stuff is still out there.
01:14:23 Ken: Well, the thing I like about the retro-computing is it's an era of computers where you can actually understand what's going on. Modern computers, you look inside, it's a few mystery chips. The chips are so complicated, nobody can understand them. With a computer like the 1401, I can look at a particular transistor and say, "This is the transistor that's causing the problem with addition. If we replace this transistor, now addition will be fixed."
01:14:46 Bryan: We also have the issue of, honestly, just speeds. That's the challenge on modern computing, the speeds are so high that you can't understand what's going on because the equipment is such a high speed.
01:14:57 Ken: There's just so many layers of software.
01:14:59 Bryan: So many layers of software, yes.
01:15:00 Ken: With old computers, you can look at the software, and you can understand basically, everything that's going on.
01:15:07 Bryan: I have to say this is the part I really love about-- You mentioned RISC-V earlier, Jess. I was so much fun when [crosstalk].
01:15:10 Jess: It is modular.
01:15:10 Bryan: It is. It feels very like- and retro is the wrong word, but it hearkens back to an era when you could understand much more about the machines. One of the things we're doing at Oxide is developing our borderline microcontrollers, but effectively for the surface processor, hardware we're to trust. We're actually operating within pretty small amounts of RAM and ROM. It does feel like the retro computing stuff, A, is actually relevant. Actually, it was funny, one of our engineers said, "Actually, you know what, 640 K is actually enough for anybody," because at the levels we are at, 640 K you can do a lot in 640 K. It's like the stuff actually still retains its relevance for sure.
01:15:55 Ken: The other part of retro-computing I like is that I feel it can help I'm preserving some history that would otherwise be lost. There's a lot of old computers that really nobody knows about them. They have very important historical value, things like the Datapoint 2200 leading to where we are today. Computers like that, that I think should be better known.
01:16:18 Bryan: It's better known even almost especially when they were exploring different ideas that didn't pan out. It's valuable. Like the multiple PC idea on the Honeywell 1800. It's important to understand that and that's interesting. I feel exactly the same way. Part of the reason I started buying old manuals when I was younger was because I was concerned that they were going to be destroyed. A lot of stuff does get destroyed.
01:16:42 Ken: Yes, there's people out there who are doing a lot of work to keep old manuals scanned and put them up on Bitsavers. There is a lot of effort to keep these manuals from getting lost which I think is important.
01:16:53 Bryan: If someone's interested in getting involved in retro-computing, what's a good way to start messing around with this stuff?
01:16:59 Ken: Come by the Computer History Museum. Come by on a Wednesday when we're working on the 1401. Talk to people there. That's one way to get involved.
01:17:07 Bryan: Computer History Museum, this is in Mountain View.
01:17:09 Ken: Mountain View, California.
01:17:10 Bryan: If you get the chance, it is a great museum. It is so much fun. If your life takes you at all to Silicon Valley, plot out some time for the Computer History Museum.
01:17:19 Ken: The 1401 has demos running on Wednesdays and Saturdays. If you want to punch a card and see it run through the computer-
01:17:26 Jess: I did that.
01:17:27 Bryan: That is [unintelligible 01:17:27].
01:17:28 Jess: What's inside?
01:17:28 Bryan: Then also, you went to the Living Computer Museum, right?
01:17:32 Jess: No, I haven't been to that one.
01:17:34 Bryan: I know I have been to that one.
01:17:35 Ken: That one's in Seattle. It has a very different focus than the Computer History Museum. The Living Computer Museum, they basically want to get all their computers up and running and have people able to sit down in front of them and use them.
01:17:50 Bryan: That's what I need.
01:17:50 Ken: As opposed to the Computer History Museum where most of the computers are just static exhibits, just the 1401, the PDP, are ones that are operational. You have a living computer museum, they have computers from the 70s, 80s, 60s that you can actually just sit down and start typing if you want, old school Unix experience, you can do that.
01:18:14 Bryan: That's great. Well, that's a great way for people to get involved. I think a lot of people are, retro-computing is a great way honestly, to get people involved in actual computing. Not actual computing. That sounds pejorative.
01:18:26 Ken: Yes, real computing.
01:18:27 Bryan: Real computing. No, but I knew it actually, I think it's a great way to remind people, again, of this hardware-software interface, and that people, we are still doing work with hardware-software interface, and that if one gets excited by some retro computing, that's great, and if you want to get excited by computing that's being done today at the hardware-software interface, there's plenty to get involved in. Well, Ken, thank you so much for coming. This has been a lot for--
01:18:50 Jess: Thanks for being here and for the promise of silicon wafer, instruction later.
01:18:55 Ken: Well, thank you for inviting me here. This was fun.
01:18:58 Bryan: Yes, I can almost forgive you for introducing just the idea of RR space auctions. When the company is ruined, it's going to be with jet nozzles, but it'll be a good way to go. Ken, thank you so much for being on the podcast.
01:19:11 Ken: yes, thank you.
01:19:12 Steve: Thanks, Ken.
01:19:12 Bryan: You've been listening to On The Metal, Tales From The Hardware-Software Interface. For show notes, to learn more about our guests, or to sign up for our mailing list, visit us at onthemetal.fm On The Metal is a production of Oxide Computer Company. It's recorded in the Oxide Garage in Oakland, California. To learn more about Oxide, visit us at oxide.computer.
On The Metal is hosted by me, Brian Cantrill, along with Jess and we are frequently joined by our boss Steve Talk. Our original and awesome theme music is by JJ Wiesler at Pollen Music Group. You can learn more about JJ and Pollen at pollenmusicgroup.com. We are edited and produced by Chris Hill and his crew at Humble Pod. From Jess, from Steve, from me, and from all of us at Oxide Computer company, thanks for listening to On The Metal.
[music]
[01:20:37] [END OF AUDIO]
